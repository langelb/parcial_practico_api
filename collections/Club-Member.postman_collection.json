{
	"info": {
		"_postman_id": "8f1fbb20-ce9e-4193-805a-ccc65cb6f069",
		"name": "Club-Member",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30508478"
	},
	"item": [
		{
			"name": "Add an member to an club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains club with added member\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"members\");\r",
							"    pm.expect(response.members).to.be.an(\"array\");\r",
							"    pm.expect(response.members.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected club structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"name\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"{{member_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Add an member to an club",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"{{member_id}}"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"a2d791a8-9167-4683-88f8-438a3cbc5413\",\n    \"name\": \"The Literary Club\",\n    \"foundationDate\": \"2000-01-01T00:00:00.000Z\",\n    \"image\": \"https://example.com/image.jpg\",\n    \"description\": \"A club for literature enthusiasts.\",\n    \"members\": [\n        {\n            \"id\": \"7afb6395-e24c-4c17-b244-4f54074d5d60\",\n            \"username\": \"john_doe\",\n            \"email\": \"john.doe@example.com\",\n            \"birthdate\": \"1990-05-20T00:00:00.000Z\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Add an invalid member to an club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the correct error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.eql(\"The member with the given id was not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"statusCode\");\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.statusCode).to.eql(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid member to an club",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The member with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Get all members of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains a list of members\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.be.an(\"array\");\r",
							"    pm.expect(response.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each member in the response contains expected properties\", function () {\r",
							"    const members = pm.response.json();\r",
							"    members.forEach(member => {\r",
							"        pm.expect(member).to.have.property(\"id\");\r",
							"        pm.expect(member).to.have.property(\"username\");\r",
							"        pm.expect(member).to.have.property(\"email\");\r",
							"        pm.expect(member).to.have.property(\"birthdate\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains valid club member data\", function () {\r",
							"    const members = pm.response.json();\r",
							"    members.forEach(member => {\r",
							"        pm.expect(member.id).to.be.a('string');\r",
							"        pm.expect(member.username).to.be.a('string');\r",
							"        pm.expect(member.email).to.be.a('string');\r",
							"        pm.expect(new Date(member.birthdate)).to.be.a('date');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						""
					]
				}
			},
			"response": [
				{
					"name": "Get all members of a club",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								""
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": \"7afb6395-e24c-4c17-b244-4f54074d5d60\",\n        \"username\": \"john_doe\",\n        \"email\": \"john.doe@example.com\",\n        \"birthdate\": \"1990-05-20T00:00:00.000Z\"\n    }\n]"
				}
			]
		},
		{
			"name": "Get an member of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the expected member\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"username\");\r",
							"    pm.expect(response).to.have.property(\"email\");\r",
							"    pm.expect(response).to.have.property(\"birthdate\");\r",
							"});\r",
							"\r",
							"pm.test(\"Member data has the correct types\", function () {\r",
							"    const member = pm.response.json();\r",
							"    pm.expect(member.id).to.be.a('string');\r",
							"    pm.expect(member.username).to.be.a('string');\r",
							"    pm.expect(member.email).to.be.a('string');\r",
							"    pm.expect(new Date(member.birthdate)).to.be.a('date');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"{{member_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get an member of a club",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"{{member_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"7afb6395-e24c-4c17-b244-4f54074d5d60\",\n    \"username\": \"john_doe\",\n    \"email\": \"john.doe@example.com\",\n    \"birthdate\": \"1990-05-20T00:00:00.000Z\"\n}"
				}
			]
		},
		{
			"name": "Get an invalid member of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the correct error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.message).to.eql(\"The member with the given id was not found in the club\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"statusCode\");\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.statusCode).to.eql(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid member of a club",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The member with the given id was not found in the club\"\n}"
				}
			]
		},
		{
			"name": "Update members of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updated members list\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"members\");\r",
							"    pm.expect(response.members).to.be.an(\"array\");\r",
							"    pm.expect(response.members.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected club structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"id\");\r",
							"    pm.expect(response).to.have.property(\"name\");\r",
							"    pm.expect(response).to.have.property(\"description\");\r",
							"    pm.expect(response).to.have.property(\"foundationDate\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n  {\r\n    \"id\": \"{{member_id}}\"\r\n  }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members"
					]
				}
			},
			"response": [
				{
					"name": "Update members of a club",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n  {\r\n    \"id\": \"{{member_id}}\"\r\n  }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"id\": \"24f6b813-797c-4550-8e3c-dde3fd16c08b\",\r\n    \"name\": \"The Literary Club\",\r\n    \"foundationDate\": \"2000-01-01T00:00:00.000Z\",\r\n    \"image\": \"https://example.com/image.jpg\",\r\n    \"description\": \"A club for literature enthusiasts.\",\r\n    \"members\": [\r\n        {\r\n            \"id\": \"d425ff55-fed1-49f8-9da9-d2ebac82da1e\",\r\n            \"username\": \"john_doe\",\r\n            \"email\": \"john.doe@example.com\",\r\n            \"birthdate\": \"1990-05-20T00:00:00.000Z\"\r\n        }\r\n    ]\r\n}"
				}
			]
		},
		{
			"name": "Update invalid members of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.message).to.include(\"One of the members was not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"statusCode\");\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members"
					]
				}
			},
			"response": [
				{
					"name": "Update invalid members of a club",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "[\r\n   {\r\n       \"id\": \"00000000-0000-0000-0000-000000000000\"\r\n   }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"One of the members was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Delete an member of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"{{member_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete an member of a club",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/{{member_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"{{member_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete an invalid member of a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"    pm.expect(response.message).to.include(\"The member with the given id was not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response).to.have.property(\"statusCode\");\r",
							"    pm.expect(response).to.have.property(\"message\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}",
						"members",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid member of a club",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}/members/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}",
								"members",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The member with the given id was not found in the club\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}