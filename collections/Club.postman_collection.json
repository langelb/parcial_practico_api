{
	"info": {
		"_postman_id": "3fcc75aa-02a1-44be-b57d-42a5bdde937f",
		"name": "Club",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30508478"
	},
	"item": [
		{
			"name": "Add a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json();\r",
							"pm.globals.set(\"club_id\", data.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"   pm.response.to.have.status(201);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"The Literary Club\",\r\n  \"foundationDate\": \"2000-01-01\",\r\n  \"image\": \"https://example.com/image.jpg\",\r\n  \"description\": \"A club for literature enthusiasts.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": [
				{
					"name": "Add a club",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"The Literary Club\",\r\n  \"foundationDate\": \"2000-01-01\",\r\n  \"image\": \"https://example.com/image.jpg\",\r\n  \"description\": \"A club for literature enthusiasts.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"name\": \"The Literary Club\",\n    \"foundationDate\": \"2000-01-01\",\n    \"image\": \"https://example.com/image.jpg\",\n    \"description\": \"A club for literature enthusiasts.\",\n    \"id\": \"589655f9-e11b-453e-885b-2ca7a0c64033\"\n}"
				}
			]
		},
		{
			"name": "Add an invalid club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains validation error\", function () {\r",
							"    const response = pm.response.json();\r",
							"    pm.expect(response.message).to.include(\"foundationDate must be a valid ISO 8601 date string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"The Literary Club\",\r\n  \"foundationDate\": 2000,\r\n  \"image\": \"https://example.com/image.jpg\",\r\n  \"description\": \"A club for literature enthusiasts.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": [
				{
					"name": "Add an invalid club",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"The Literary Club\",\r\n  \"foundationDate\": 2000,\r\n  \"image\": \"https://example.com/image.jpg\",\r\n  \"description\": \"A club for literature enthusiasts.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"message\": [\n        \"foundationDate must be a valid ISO 8601 date string\"\n    ],\n    \"error\": \"Bad Request\",\n    \"statusCode\": 400\n}"
				}
			]
		},
		{
			"name": "Get all clubs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains clubs\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.above(0);\r",
							"});\r",
							"\r",
							"pm.test(\"Each club contains expected fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.forEach(club => {\r",
							"        pm.expect(club).to.have.property('id');\r",
							"        pm.expect(club).to.have.property('name');\r",
							"        pm.expect(club).to.have.property('description');\r",
							"        pm.expect(club).to.have.property('foundationDate');\r",
							"        pm.expect(club).to.have.property('image');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs"
					]
				}
			},
			"response": [
				{
					"name": "Get all clubs",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "[\r\n    {\r\n        \"id\": \"d5d91a54-9a38-429d-b02c-8b1069fe73e4\",\r\n        \"name\": \"The Literary Club\",\r\n        \"foundationDate\": \"2000-01-01T00:00:00.000Z\",\r\n        \"image\": \"https://example.com/image.jpg\",\r\n        \"description\": \"A club for literature enthusiasts.\",\r\n        \"members\": []\r\n    }\r\n]"
				}
			]
		},
		{
			"name": "Get one club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response is an object\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Club contains expected fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('name');\r",
							"    pm.expect(jsonData).to.have.property('description');\r",
							"    pm.expect(jsonData).to.have.property('foundationDate');\r",
							"    pm.expect(jsonData).to.have.property('image');\r",
							"});\r",
							"\r",
							"pm.test(\"Correct club is returned\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.variables.get(\"club_id\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Get one club",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"id\": \"589655f9-e11b-453e-885b-2ca7a0c64033\",\r\n    \"name\": \"The Literary Club\",\r\n    \"foundationDate\": \"2000-01-01T00:00:00.000Z\",\r\n    \"image\": \"https://example.com/image.jpg\",\r\n    \"description\": \"A club for literature enthusiasts.\",\r\n    \"members\": []\r\n}"
				}
			]
		},
		{
			"name": "Get an invalid club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains the correct error message\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData.message).to.include(\"The club with the given id was not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"    pm.expect(jsonData).to.have.property('statusCode');\r",
							"    pm.expect(jsonData.statusCode).to.eql(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Get an invalid club",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The club with the given id was not found\"\r\n}"
				}
			]
		},
		{
			"name": "Update a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains updated club\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('name', 'The Updated Literary Club');\r",
							"    pm.expect(jsonData).to.have.property('foundationDate', '1995-05-20');\r",
							"    pm.expect(jsonData).to.have.property('image', 'https://example.com/new-image.jpg');\r",
							"    pm.expect(jsonData).to.have.property('description', 'A renowned club for literature lovers.');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"The Updated Literary Club\",\r\n  \"foundationDate\": \"1995-05-20\",\r\n  \"image\": \"https://example.com/new-image.jpg\",\r\n  \"description\": \"A renowned club for literature lovers.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Update a club",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"The Updated Literary Club\",\r\n  \"foundationDate\": \"1995-05-20\",\r\n  \"image\": \"https://example.com/new-image.jpg\",\r\n  \"description\": \"A renowned club for literature lovers.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": \"589655f9-e11b-453e-885b-2ca7a0c64033\",\n    \"name\": \"The Updated Literary Club\",\n    \"foundationDate\": \"1995-05-20\",\n    \"image\": \"https://example.com/new-image.jpg\",\n    \"description\": \"A renowned club for literature lovers.\"\n}"
				}
			]
		},
		{
			"name": "Update invalid club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('message', 'The club with the given id was not found');\r",
							"    pm.expect(jsonData).to.have.property('statusCode', 404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.keys(['statusCode', 'message']);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"The Updated Literary Club\",\r\n  \"foundationDate\": \"1995-05-20\",\r\n  \"image\": \"https://example.com/new-image.jpg\",\r\n  \"description\": \"A renowned club for literature lovers.\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Update invalid club",
					"originalRequest": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"The Updated Literary Club\",\r\n  \"foundationDate\": \"1995-05-20\",\r\n  \"image\": \"https://example.com/new-image.jpg\",\r\n  \"description\": \"A renowned club for literature lovers.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\n    \"statusCode\": 404,\n    \"message\": \"The club with the given id was not found\"\n}"
				}
			]
		},
		{
			"name": "Delete a club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/{{club_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"{{club_id}}"
					]
				}
			},
			"response": [
				{
					"name": "Delete a club",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/{{club_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"{{club_id}}"
							]
						}
					},
					"status": "No Content",
					"code": 204,
					"_postman_previewlanguage": null,
					"header": null,
					"cookie": [],
					"body": null
				}
			]
		},
		{
			"name": "Delete an invalid club",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains correct error message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.equal(\"The club with the given id was not found\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains expected error structure\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('statusCode', 404);\r",
							"    pm.expect(jsonData).to.have.property('message');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"clubs",
						"00000000-0000-0000-0000-000000000000"
					]
				}
			},
			"response": [
				{
					"name": "Delete an invalid club",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/clubs/00000000-0000-0000-0000-000000000000",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"clubs",
								"00000000-0000-0000-0000-000000000000"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json",
							"description": "",
							"type": "text"
						}
					],
					"cookie": [],
					"body": "{\r\n    \"statusCode\": 404,\r\n    \"message\": \"The club with the given id was not found\"\r\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1",
			"type": "string"
		}
	]
}